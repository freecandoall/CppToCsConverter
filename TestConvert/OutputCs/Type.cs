//////////////////////////////////////////////////////////////////
//
//	Auto generated by PacketGenerator
//	Don't fix me!!!
//
//////////////////////////////////////////////////////////////////
//[ForceComment] #pragma once
//[ForceComment]  #include "IFramework.h"
//[ForceComment]  #include "ErrorType.h"
using S  = System;
namespace Adapter
{
	public static class AutoGen_by_Converter
	{
		public const 	uint s_dwMaxUserIDLength = 32;
		public const 	uint s_dwMaxUserPWDLength = 32;
		public const 	uint s_dwMaxNickNameLength = 32;
		public const 	uint s_dwMaxPacketSize = 1000;
		public const uint MAX_LEN_PK_NICK = 25;
		public const uint MAX_LEN_PK_ID = 32;
		public const uint MAX_LEN_PK_PW = 32;
		public const uint RESUT_SUCCESS = 0;
		public const uint REDIS_EXPIRE_PERIOD = 60;
		//[ForceComment]  #define MAX(A, B) ((A) > (B) ? (A) : (B) )
		//[ForceComment]  #define MIN(A, B) ((A) < (B) ? (A) : (B) )
		//[ForceComment]  #define WIN32_LEAN_AND_MEAN
		public const string GMTOOL_HOST = "localhost";	//"
		public const uint GMTOOL_PORT = 9050;	//"
		public const string COUPON_HOST = "ts-coupon-api.four33.com";	//"
		public const uint COUPON_PORT = 10071;	//"
		public const string GOOGLE_BILLING_POST_URL = "/oauth2/v4/token";	//"
		public const string GOOGLE_BILLING_HOST_URL = "www.googleapis.com";	//"
		public const string GOOGLE_BILLING_GRANT_TYPE = "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=";	//"
	}
	struct E_RESULT
	{
		public enum TYPE
		{
			SUCCESS = 0,
			FAILED,
		}
		/* TYPE */
	}
	/* E_RESULT */
	struct E_ITEMPROPERTY
	{
		public enum TYPE
		{
			ACCESSORY,
			BODY,
			HEAD,
			SHIELD,
			WEAPON,
		}
		/* TYPE */
	}
	/* E_ITEMPROPERTY */
	//#define IS_NULL(p) (!(p))
	//#define IS_NOT_NULL(p) (p)
	// Packet String Size 정의
	////////////////////////////////////////////////////////
	//[ForceComment] typedef S::WString<MAX_LEN_ID> WSTR_ID;
	//[ForceComment] typedef const WSTR_ID CWSTR_ID;
	////////////////////////////////////////////////////////
	//[ForceComment] typedef S::WString<MAX_LEN_PW> WSTR_PW;
	//[ForceComment] typedef const WSTR_PW CWSTR_PW;
	// Passive Type
	struct E_PASSIVE
	{
		public enum TYPE
		{
			NONE = 0,
			HP_UP, //< 체력 n%이하일 경우 체력 n% 회복
			DEFENCE_UP, //< 적에게 피격시 방어력 증가
			DAMAGE_UP, //< 공속 증가시 공격력 증가
			COOLTIME_DECREASE = 1, //< cooltime - 10%
			MAX_PASSIVE,
		}
		/* TYPE */
	}
	/* E_BUY_UTILITY */
	// Skill Type
	struct E_SKILL_COND
	{
		public enum TYPE
		{
			NONE = 0,
			COUNT, //< 카운트 스킬
			REF_COUNT, //< 누적 스킬
			STACK, //< 스택 스킬
			CHARGE, //< 차지 스킬
			CASTING, //< 캐스팅(시전)스킬
			ONOFF, //< ON/OFF 스킬
			SELECT_BULLET, //< 불렛 선택 스킬
			MARKING, //< 표식 스킬
			GLOBAL_ATTACK, //< 글로벌 공격 스킬
			COMBO_DEBUF, //< 콤보 디버프 스킬
			COMBO, //< 콤보 스 킬
			DASH, //< 대쉬 스킬
			JUMP, //< 점프 스킬
			WARP, //< 순간이동(워프) 스킬
			REMEMBER_POS, //< 위치저장 이동 스킬
			GROUP, //< 그룹형 스킬
			MAX_SKILL_COND_TYPE,
		}
	}
	//#define CHECK_INFINITE_VARIABLE int nWhileCount = 0
	//#define CHECK_INFINITE_VARIABLE_INIT nWhileCount = 0
	//#define CHECK_INFINITE_WHILE ++nWhileCount; if( nWhileCount > 20000) {ASSERT_CRASH(false);}
	//#define LOG_RECORD
	//#define DISPATCHER_NEW
}
/* Adapter */
